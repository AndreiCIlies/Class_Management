@inject IHttpClientFactory HttpClientFactory

<select @bind="selectedClassId">
    <option value="0">-- Select Class --</option>
    @foreach (var classId in ClassesIds)
    {
        <option value="@classId">@classId</option>
    }
</select>

<button @onclick="FetchGradeHistory">View</button>

<button @onclick="ToggleGradeHistoryVisibility">
    @(isGradeHistoryVisible ? "Hide" : "Show") Grades History
</button>

@if (isGradeHistoryVisible && gradesHistory != null && gradesHistory.Any())
{
    <br />
    <h4>Grades History for Class @selectedClassId</h4>
    <table class="table table-striped table-bordered">
        <thead class="table-success text-center">
            <tr>
                <th>Student</th>
                <th>Grade</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var grade in gradesHistory)
            {
                <tr class="text-center">
                    <td>@($"{grade.Student?.FirstName} {grade.Student?.LastName}")</td>
                    <td>@grade.Value</td>
                    <td>@grade.DateAssigned.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (isGradeHistoryVisible && (gradesHistory == null || !gradesHistory.Any()))
{
    <p>No grades available for the selected class.</p>
}
else if (gradesHistory == null || !gradesHistory.Any())
{
    <p>No grades available for the selected class.</p>
}

@code {
    [Parameter] public List<int> ClassesIds { get; set; } = new List<int>();
    private int selectedClassId = 0;
    private List<Grade> gradesHistory = new List<Grade>();
    private bool isGradeHistoryVisible = true;
    private HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClassManagementWebApp.ServerAPI");
    }

    private async Task FetchGradeHistory()
    {
        if (selectedClassId == 0)
        {
            return;
        }

        try
        {
            gradesHistory = await _httpClient.GetFromJsonAsync<List<Grade>>($"grades/class/{selectedClassId}/history");

            if (gradesHistory == null || !gradesHistory.Any())
            {
                gradesHistory = new List<Grade>();
            }

            foreach (var grade in gradesHistory)
			{
				Student student = await _httpClient.GetFromJsonAsync<Student>($"students/{grade.StudentId}");
                grade.Student = student;
			}
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching grade history: {ex.Message}");
            gradesHistory = new List<Grade>();
        }
    }

    private void ToggleGradeHistoryVisibility()
    {
        isGradeHistoryVisible = !isGradeHistoryVisible;
    }
}

@page "/grades/{classId:int}"
@attribute [Authorize(Roles = "Teacher")]

@inject IGradeService GradeService
@inject IClassService ClassService
@inject NavigationManager Nav

<h3><b>Grades Manager</b></h3>
<p>Manage the grades of the students in this course.</p>

@if (students == null)
{
    <p>Loading students...</p>
}
else if (!students.Any())
{
    <p>No students found for this class.</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Student Email</th>
                <th>Grades</th>
                <th>New Grade</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.Email</td>
                    <td>
                        @if (student.Grades.Any())
                        {
                            @string.Join(", ", student.Grades.Select(g => g.Value))
                        }
                        else
                        {
                            <span>No grades</span>
                        }
                    </td>
                    <td>
                        <input type="number" min="1" max="100" @bind="newGrades[student.Id]" />
                    </td>
                    <td>
                        <button @onclick="() => AddGrade(student.Id)">Add Grade</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<button @onclick="GoBack">
    Go back
</button>

@code {
    [Parameter] public int ClassId { get; set; }
    private List<Student> students = new();
    private Dictionary<string, int> newGrades = new();

    protected override async Task OnInitializedAsync()
    {
        var classData = await ClassService.GetClassByIdAsync(ClassId);
        if (classData != null)
        {
            students = classData.Students;

            foreach (var student in students)
            {
                newGrades[student.Id] = 0;
            }
        }
    }

    private async Task AddGrade(string studentId)
    {
        if (!newGrades.ContainsKey(studentId) || newGrades[studentId] < 1 || newGrades[studentId] > 100)
        {
            return;
        }

        var grade = new Grade
        {
            StudentId = studentId,
            CourseId = ClassId,
            Value = newGrades[studentId]
        };

        await GradeService.CreateGradeAsync(grade);

        var student = students.FirstOrDefault(s => s.Id == studentId);
        if (student != null)
        {
            var studentIndex = students.FindIndex(s => s.Id == studentId);
            if (studentIndex != -1)
			{
				student.Grades.Add(grade);
				students[studentIndex] = student;
			}
        }
    }

    private void GoBack()
    {
        Nav.NavigateTo("/");
    }
}
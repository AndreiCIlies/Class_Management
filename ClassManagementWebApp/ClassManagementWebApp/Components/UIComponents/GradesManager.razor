@page "/grades/{classId:int}"
@rendermode InteractiveServer

@inject IGradeService GradeService
@inject IClassService ClassService
@inject NavigationManager Nav
@using ClassManagementWebApp.DTO

<div style="float:right; background-color: lightgray; padding: 10px; border-radius: 5px; display: inline-block; cursor: pointer;">
    <label style="margin: 0;">
        <InputFile OnChange="@HandleFileSelected" style="display:none" accept=".csv" />
        <span style="cursor: pointer;">📂 Import CSV</span>
    </label>
</div>
<div class="text-danger" style="float:right; margin-right: 10px; padding: 10px; display: inline-block;">
    <span>@CSVError</span>
</div>

<br />
<br />
<h3><b>Grades Manager</b></h3>
<p>Manage the grades of the students in this course.</p>

@if (students == null)
{
    <p>Loading students...</p>
}
else if (!students.Any())
{
    <p>No students found for this class.</p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-success text-center">
            <tr>
                <th>Student Email</th>
                <th>Grades</th>
                <th>New Grade</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr class="text-center">
                    <td>@student.Email</td>
                    <td>
                        @if (grades[student.Id] != null)
                        {
                            @string.Join(", ", grades[student.Id])
                        }
                        else
                        {
                            <span>No grades</span>
                        }
                    </td>
                    <td>
                        <input type="number" min="0" max="100" @bind="newGrade[student.Id]" />
                        <button @onclick="() => AddGrade(student.Id)">Add Grade</button>
                        <button @onclick="() => OpenMultipleGradeDialog(student.Id)">Multiple Grades</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <br />
}
@if (showDialog)
{
    <div style="background-color:rgba(0,0,0,0.5);position:fixed;top:0;left:0;right:0;bottom:0;display:flex;align-items:center;justify-content:center;">
        <div style="background:white;padding:20px;border-radius:10px;min-width:300px;">
            <h5>Add Multiple Grades</h5>
            <p>Enter grades separated by comma or space:</p>
            <input @bind="multipleGradesInput" class="form-control" />
            <br />
            <button class="btn btn-success" @onclick="SubmitMultipleGrades">Submit</button>
            <button class="btn btn-secondary" @onclick="() => showDialog = false">Cancel</button>
        </div>
    </div>
}

<button @onclick="GoBack">Go back</button>

@code {
    [Parameter] public int ClassId { get; set; }
    private List<Student> students = new();
    private Dictionary<string, List<int>> grades = new();
    private Dictionary<string, int> newGrade = new();
    private bool showDialog = false;
    private string selectedStudentId;
    private string multipleGradesInput = "";

    private string fileName = string.Empty;
    private string CSVError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var teacherClass = await ClassService.GetClassByIdAsync(ClassId);

        if (teacherClass != null)
        {
            students = await ClassService.GetStudentsInClassAsync(ClassId);

            foreach (var student in students)
            {
                grades[student.Id] = new List<int> { };

                foreach (var grade in student.Grades)
                {
                    grades[student.Id].Add(grade.Value);
                }

                newGrade[student.Id] = 0;
            }
        }
    }

    private async Task AddGrade(string studentId)
    {
        if (newGrade[studentId] <= 0 || newGrade[studentId] > 100)
        {
            return;
        }

        var gradeValue = newGrade[studentId];

        var grade = new Grade
            {
                StudentId = studentId,
                CourseId = ClassId,
                Value = gradeValue,
                DateAssigned = DateTime.UtcNow
            };

        await GradeService.CreateGradeAsync(grade);

        var student = students.FirstOrDefault(s => s.Id == studentId);

        if (student != null)
        {
            var createdGrade = await GradeService.CreateGradeAsync(grade);
            student.Grades.Add(createdGrade);
            grades[studentId].Add(gradeValue);
            newGrade[studentId] = 0;
        }

        StateHasChanged();
    }
    private void OpenMultipleGradeDialog(string studentId)
    {
        selectedStudentId = studentId;
        multipleGradesInput = "";
        showDialog = true;
    }

    private async Task SubmitMultipleGrades()
    {
        if (string.IsNullOrWhiteSpace(multipleGradesInput) || string.IsNullOrEmpty(selectedStudentId)) return;

        var separators = new[] { ',', ' ' };
        var gradeStrings = multipleGradesInput.Split(separators, StringSplitOptions.RemoveEmptyEntries);
        var gradeValues = new List<int>();

        foreach (var gradeStr in gradeStrings)
        {
            if (int.TryParse(gradeStr, out int value) && value >= 1 && value <= 100)
            {
                gradeValues.Add(value);
            }

        }

        if (gradeValues.Count > 0)
        {
            var request = new AddGradesToStudentRequest
                {
                    StudentId = selectedStudentId,
                    CourseId = ClassId,
                    Values = gradeValues
                };

            try
            {
                var addedGrades = await GradeService.AddMultipleGradesAsync(request);
                var student = students.FirstOrDefault(s => s.Id == selectedStudentId);
                if (student != null)
                {
                    foreach (var grade in addedGrades)
                    {
                        student.Grades.Add(grade);
                        if (grades.ContainsKey(selectedStudentId))
                        {
                            grades[selectedStudentId].Add(grade.Value);
                        }
                    }
                }
            }
            catch (HttpRequestException httpEx)
            {
                // Loghează eroarea HTTP detaliată
                Console.WriteLine($"HTTP Request Error: {httpEx.Message}");
                // Poți afișa un mesaj de eroare utilizatorului
            }
            catch (Exception ex)
            {

                Console.WriteLine($"General Error: {ex.Message}");

            }
        }

        // Resetează și închide dialogul
        multipleGradesInput = "";
        showDialog = false;
        StateHasChanged(); // Asigură re-renderizarea componentei
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null && file.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
        {
            fileName = file.Name;

            using var reader = new StreamReader(file.OpenReadStream());
            var content = await reader.ReadToEndAsync();

            var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);

            if (lines.Length < 2)
            {
                return;
            }

            var headers = lines[0].Trim().Split(',', StringSplitOptions.TrimEntries);

            if (headers.Any(h => !students.Any(s => h == $"{s.LastName} {s.FirstName}")))
            {
                CSVError = "The CSV file contains students that are not in the class.";
                return;
            }

            var dataDict = new Dictionary<string, List<int>>();

            foreach (var header in headers)
            {
                dataDict[header] = new List<int>();
            }

            for (int i = 1; i < lines.Length; i++)
            {
                var row = lines[i].Trim().Split(',', StringSplitOptions.TrimEntries);

                for (int j = 0; j < headers.Length && j < row.Length; j++)
                {
                    var student = students.FirstOrDefault(s => $"{s.LastName} {s.FirstName}" == headers[j]);
                    if (int.TryParse(row[j], out int value))
                    {
                        dataDict[student.Id].Add(value);
                    }
                }
            }

            var request = new AddGradesToMultipleStudents
            {
                CourseId = ClassId,
                Grades = dataDict
            };

            var result = await GradeService.AddGradesToMultipleStudents(request);
            if(result)
            {
                foreach (var studentGrades in dataDict)
                {
                    grades[studentGrades.Key].AddRange(studentGrades.Value);
                }
            }

        }
        else
        {
            fileName = null;
        }
        StateHasChanged();
    }

    private void GoBack()
    {
        Nav.NavigateTo("/");
    }
}
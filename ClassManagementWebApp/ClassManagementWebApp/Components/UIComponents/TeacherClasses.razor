@using ClassManagementWebApp.Security

@inject IAccessTokenService AccessTokenService
@inject IHttpClientFactory HttpClientFactory
@inject JWTAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav

<button class="btn btn-primary m-2" @onclick="ShowAddGroupComponent">
    Add Class
    </button>

<h3><b>My Classes</b></h3>

@if (classes == null)
{
    <p>Loading...</p>
}
else if (classes.Count == 0)
{
    <p>No classes found.</p>
}
else
{
    <div>
        @foreach (var classItem in classes)
        {
            <button class="btn btn-primary m-2" @onclick="() => NavigateToGrades(classItem.Id)">
                @classItem.Name
            </button>
            <br/>
        }
    </div>
}

<AddCourseComponent OnConfirmationChanged="OnClassAdded" @ref="addGroupComponent" />

@code {
    private List<Class> classes = new List<Class>();
    private string teacherId = string.Empty;
    private HttpClient _httpClient;

    private AddCourseComponent addGroupComponent;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("ClassManagementWebApp.ServerAPI");
        await LoadTeacherClasses();
    }

    private async Task LoadTeacherClasses()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = state.User;

        if (user.Identity.IsAuthenticated)
        {
            teacherId = user.Claims.FirstOrDefault(c => c.Type == "sub")?.Value;

            if (!string.IsNullOrEmpty(teacherId))
            {
                try
                {
                    classes = await _httpClient.GetFromJsonAsync<List<Class>>($"classes/teacher/{teacherId}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching classes: {ex.Message}");
                    classes = new List<Class>();
                }
            }
        }
    }

    private void NavigateToGrades(int classId)
    {
        Nav.NavigateTo($"/grades/{classId}");
    }

    private void ShowAddGroupComponent()
    {
        addGroupComponent.Show();
    }

    public async Task OnClassAdded(Class newClass)
    {
        classes.Add(newClass);
        //add the new class to the database
        StateHasChanged();
    }
}